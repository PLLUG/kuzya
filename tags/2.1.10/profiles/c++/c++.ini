[info]
language=c++
filter=*.cpp *.c *.cxx *.h

[templates]
var\1\label=void
var\1\template=void
var\2\label=char
var\2\template=char
var\3\label=wchar_t
var\3\template=wchar_t
var\4\label=short
var\4\template=short
var\5\label=int
var\5\template=int
var\6\label=double
var\6\template=double
var\7\label=float
var\7\template=float
var\8\label=long
var\8\template=long
var\9\label=bool
var\9\template=bool
var\10\label=signed
var\10\template=signed
var\11\label=unsigned
var\11\template=unsigned
var\12\label=const
var\12\template=const
var\size=12

types\1\label=typedef
types\1\template=typedef
types\2\label=class
types\2\template="class \n{ \n};"
types\3\label=struct
types\3\template="struct \n{ \n};"
types\4\label=union
types\4\template=union
types\5\label=enum 
types\5\template="enum\n{ \n};"
types\size=5

memory\1\label=new
memory\1\template=new
memory\2\label=delete
memory\2\template=delete
memory\size=2


cast\1\label=const_cast
cast\1\template="const_cast()"
cast\2\label=reinterpret_cast
cast\2\template="reinterpret_cast()"
cast\3\label=static_cast
cast\3\template="static_cast()"
cast\size=3

binary\1\label=and
binary\1\template=and
binary\2\label=and_eq
binary\2\template=and_eq
binary\3\label=bitand
binary\3\template=bitand
binary\4\label=bitor
binary\4\template=bitor
binary\5\label=compl
binary\5\template=compl
binary\6\label=not
binary\6\template=not
binary\7\label=not_eq
binary\7\template=not_eq
binary\8\label=or
binary\8\template=or
binary\9\label=or_eq
binary\9\template=or_eq
binary\10\label=xor
binary\10\template=xor
binary\11\label=xor_eq
binary\11\template=xor_eq
binary\size=11

bool\1\label=true
bool\1\template=true
bool\2\label=false
bool\2\template=false
bool\size=2

modifiers\1\label=private
modifiers\1\template="private:"
modifiers\2\label=protected
modifiers\2\template="protected:"
modifiers\3\label=public
modifiers\3\template="public:"
modifiers\4\label=friend
modifiers\4\template="friend"
modifiers\5\label=virtual
modifiers\5\template="virtual:"
modifiers\6\label=extern
modifiers\6\template="extern"
modifiers\7\label=inline
modifiers\7\template="inline"
modifiers\8\label=static
modifiers\8\template="static"
modifiers\size=8

flow_control\1\label=case
flow_control\1\template="case:  ; \n break;"
flow_control\2\label=break
flow_control\2\template="break;"
flow_control\3\label=continue
flow_control\3\template="continue;"
flow_control\4\label=do..while
flow_control\4\template="do \n { \n} \n while"
flow_control\5\label=else
flow_control\5\template=else
flow_control\6\label=for
flow_control\6\template="for( ; ; ) \n{\n}"
flow_control\7\label=goto
flow_control\7\template=goto
flow_control\8\label=if
flow_control\8\template="if() \n { \n}"
flow_control\9\label=return
flow_control\9\template=return
flow_control\10\label=switch
flow_control\10\template="switch() \n{\n}"
flow_control\11\label=while
flow_control\11\template="while() \n{\n}"
flow_control\size=11

exception\1\label=try
exception\1\template="try \n{\n}"
exception\2\label=catch
exception\2\template="catch() \n{\n}"
exception\3\label=throw
exception\3\template="throw()"
exception\size=3

graphics\1\label=RGB
graphics\1\template="RGB(,,,)"
graphics\2\label=arc(...)
graphics\2\template="arc( );"
graphics\3\label=bar(...)
graphics\3\template="bar( );"
graphics\4\label=bar3d(...)
graphics\4\template="bar3d( );"
graphics\5\label=circle(...)
graphics\5\template="circle( );"
graphics\6\label=cleardevice()
graphics\6\template="cleardevice();"
graphics\7\label=close()
graphics\7\template="close();"
graphics\8\label=closegraph
graphics\8\template="closegraph();"
graphics\9\label=drawfunc(...)
graphics\9\template="drawfunc( );"
graphics\10\label=drawpoly(...)
graphics\10\template="drawpoly( );"
graphics\11\label=ellipse(...)
graphics\11\template="ellipse( );"
graphics\12\label=fillellipse(...)
graphics\12\template="fillellipse( );"
graphics\13\label=getmaxx()
graphics\13\template="getmaxx();"
graphics\14\label=getmaxy()
graphics\14\template="getmaxy();"
graphics\15\label=image(...)
graphics\15\template="image( );"
graphics\16\label=initgraph()
graphics\16\template="initgraph();"
graphics\17\label=line(...)
graphics\17\template="line( );"
graphics\18\label=lineto(...)
graphics\18\template="lineto( );"
graphics\19\label=moveto(...)
graphics\19\template="moveto( )"
graphics\20\label=outtext(...)
graphics\20\template="outtext( );"
graphics\21\label=outtextxy(...)
graphics\21\template="outtextxy( );"
graphics\22\label=pieslice(...)
graphics\22\template="pieslice( );"
graphics\23\label=putpixel(...)
graphics\23\template="putpixel( );"
graphics\24\label=rectangle(...)
graphics\24\template="rectangle( );"
graphics\25\label=save(...)
graphics\25\template="save( );"
graphics\26\label=setbkcolor(...)
graphics\26\template="setbkcolor( );"
graphics\27\label=setcolor(...)
graphics\27\template="setcolor( );"
graphics\28\label=setfillcolor(...)
graphics\28\template="setfillcolor( );"
graphics\29\label=setfillstyle(...)
graphics\29\template="setfillstyle( );"
graphics\30\label=setlinestyle(...)
graphics\30\template="setlinestyle( );"
graphics\31\label=settextstyle(...)
graphics\31\template="settextstyle( );"
graphics\size=31

turtle\1\label=hideturtle()
turtle\1\template="hideturtle();"
turtle\2\label=showturtle()
turtle\2\template="showturtle();"
turtle\3\label=turtlepaint()
turtle\3\template="turtlepaint();"
turtle\4\label=turtlepaintnot()
turtle\4\template="turtlepaintnot();"
turtle\5\label=goforward(int);
turtle\5\template="goforward( );"
turtle\6\label=goback(int)
turtle\6\template="goback( );"
turtle\7\label=eright(int)
turtle\7\template="eright( )"
turtle\8\label=left(int)
turtle\8\template="left( );"
turtle\size=8

examples\1\label="Hello World"
examples\1\template="#include <stdio.h>
int main() 
{
        printf(\"Hello, world!\\n\");
	getchar();
        return 0;
}
"
examples\2\label="Hello KuzyaGraph"
examples\2\template="#include <stdio.h>
#include <graphics.h>
int main() 
{
	initgraph();
	
	circle(200,200,100);
	line(200,275,200,240);
	line(200,240,215,230);
	line(200,240,185,230);
	arc(200,258,950,950,30);
	arc(200,200,-950,-950,75);
	
	line(140,90,130,129);
	line(140,90,160,110);
	
	ellipse(150,175,25,15);
	ellipse(250,175,25,15);
	
	ellipse(150,175,5,12);
	ellipse(250,175,5,12);
	
	line(260,90,270,130);
	line(260,90,240,110);
	
	
	line(120,230,50,200);
	line(125,218,40,170);
	line(123,240,60,230);
	
	line(280,230,350,200);
	line(275,218,360,170);
	line(277,240,340,230);
	
	outtextxy(200,30,\"Hello,KuzyaGraph!!!\");  
	closegraph();
        return 0;
}"
examples\size=2
